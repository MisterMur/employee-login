version: "3.0"
networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge
services:
  react-portal:
    container_name: react-portal
    stdin_open: true
    environment:
      CHOKIDAR_USEPOLLING: "true"
    build:
      dockerfile: Dockerfile
      context: "./react-portal"
    volumes:
      - /usr/src/app/node_modules
      - ./react-portal:/usr/src/app
    ports:
      - "3000:3000"
    networks:
      - frontend

  login-db:
    container_name: mysql
    build:
      dockerfile: Dockerfile
      context: "./login_db_docker_image"
    networks:
      - backend
    ports:
      - "3306:3306"
    volumes:
      - login-DB:/var/lib/mysql
    cap_add:
      - SYS_NICE # CAP_SYS_NICE

  employee-db:
    container_name: postgres
    build:
      dockerfile: Dockerfile
      context: "./employee_db_docker_image"
    networks:
      - backend
    ports:
      - "5432:5432"
    volumes:
      - employee-DB:/var/lib/pgdb

  login-ws:
    container_name: login
    command: mvn clean install -DskipTests
    build:
      dockerfile: Dockerfile
      context: "./login-service"
    ports:
      - "8081:8081"
    depends_on:
      - login-db
      - discovery
    restart: on-failure
    networks:
      - backend

  employee-ws:
    container_name: employee
    command: mvn clean install -DskipTests
    build:
      dockerfile: Dockerfile
      context: "./employee-service"
    ports:
      - "8082:8082"
    environment:
      - spring.datasource.url=jdbc:postgresql://postgres:5432/employeeDB
    depends_on:
      - employee-db
      - discovery
    restart: on-failure
    networks:
      - backend

  discovery:
    container_name: eureka
    build:
      dockerfile: Dockerfile
      context: "./discovery-service"
    ports:
      - "8761:8761"
    restart: on-failure
    networks:
      - backend

  gateway:
    container_name: zuul
    build:
      dockerfile: Dockerfile
      context: "./api-gateway"
    ports:
      - "8080:8080"
    depends_on:
      - discovery
    restart: on-failure
    networks:
      - backend
volumes:
  employee-DB:
  login-DB:
